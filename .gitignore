//serverhead.h
/*===========================
File Name: serverhead.h
Author: Sunjunwei
=============================*/
#include<sys/types.h>  
#include<netinet/in.h>  
#include<arpa/inet.h>  
#include<sys/types.h>
#include<sys/socket.h>
#include<unistd.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<stdio.h>
#include<stdlib.h>
#include<errno.h>
#include<netdb.h>
#include<stdarg.h>
#include<string.h>
 
#define SERVER_PORT 8000
#define BUFFER_SIZE 32768
#define FILE_NAME_MAX_SIZE 512


//client.c
/*===========================
**	File Name: client.c
**	Author: Sunjunwei
=============================*/
#include"serverhead.h"

/* 包头 */
typedef struct 
{
    int id;
    int buf_size;
}PackInfo;
 
/* 接收包 */
struct RecvPack
{
    PackInfo head;
    char buf[BUFFER_SIZE];
} data;
  

int main()
{
    int id = 1;
    char *file_name="rec.txt";
    /* 创建UDP套接口 */
    struct sockaddr_in server_addr;
    bzero(&server_addr, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    server_addr.sin_port = htons(SERVER_PORT); 

    /* 创建socket */

    int server_socket_fd = socket(AF_INET, SOCK_DGRAM, 0);
    if(server_socket_fd == -1)
    {
        perror("Create Socket Failed:");
        exit(1);
    }   
   
    /* 绑定套接口 */
    if(-1 == (bind(server_socket_fd,(struct sockaddr*)&server_addr,sizeof(server_addr))))
    {
        perror("Server Bind Failed:");
        exit(1);
    }
/* 打开文件，准备写入 */
    FILE *fp = fopen(file_name, "w");
    if(NULL == fp)
    {
        printf("File:\t%s Can Not Open To Write\n", file_name); 
        exit(1);
    }
  
    /* 定义一个地址，用于捕获客户端地址 */
    struct sockaddr_in client_addr;
    socklen_t client_addr_length = sizeof(client_addr);


    /* 从客户端接收数据，并写入文件 */
    int len = 0;
    while(1)
    {
        PackInfo pack_info;
  
        if((len = recvfrom(server_socket_fd, (char*)&data, sizeof(data), 0, (struct sockaddr*)&client_addr,&client_addr_length)) > 0)
        {
            if(data.head.id == id)
            {
                pack_info.id = data.head.id;
                pack_info.buf_size = data.head.buf_size;
                ++id;
                /* 发送数据包确认信息 通过很少量的信息就可实现信息的确认，效率较高*/
                if(sendto(server_socket_fd, (char*)&pack_info, sizeof(pack_info), 0, (struct sockaddr*)&client_addr, client_addr_length) < 0)
         	{
          	    printf("Send confirm information failed!");
        	}
        	/* 写入文件 */
        	if(fwrite(data.buf, sizeof(char), data.head.buf_size, fp) < data.head.buf_size)
        	{
	            printf("File:\t%s Write Failed\n", file_name);
          	    break;
        	}
      	    }
      	    else if(data.head.id < id) /* 如果是重发的包 */
      	         {   
        	     pack_info.id = data.head.id;
        	     pack_info.buf_size = data.head.buf_size;
        	     /* 重发数据包确认信息 */
        	     if(sendto(server_socket_fd, (char*)&pack_info, sizeof(pack_info), 0, (struct sockaddr*)&client_addr, client_addr_length) < 0)
        	     {
          	         printf("Send confirm information failed!");
        	     }
      	         }   
      	      
            }
            else
            {
      	        break;
    	    }
       }
  
    printf("Receive File:\t%s From Server IP Successful!\n", file_name);
    fclose(fp);
    close(server_socket_fd);
    return 0;
}


//clienthead.h
/*===========================
File Name: clienthead.h
Author: Sunjunwei
=============================*/ 
 #include<sys/types.h>
  #include<sys/socket.h>
  #include<unistd.h>
  #include<netinet/in.h>
  #include<arpa/inet.h>
  #include<stdio.h>
  #include<stdlib.h>
  #include<errno.h>
  #include<netdb.h>
  #include<stdarg.h>
  #include<string.h>
  #include<time.h>

  #define SERVER_PORT 8000
  #define BUFFER_SIZE 32768
  #define FILE_NAME_MAX_SIZE 512
  
  
//  client.c
/*===========================
File Name: client.c
Author: Sunjunwei
=============================*/
#include"clienthead.h"
  
  /* 包头 */
  typedef struct
  {
    int id;
    int buf_size;
  }PackInfo;
  
  /* 接收包 */
  struct SendPack
  {
    PackInfo head;
    char buf[BUFFER_SIZE];
  } data;
  
int main()
{
  /* 发送id */
  int send_id = 0;
  
  /*时间计时*/
  time_t t_start,t_end;
  /* 接收id */
  int receive_id = 0;
  
  /* 服务端地址 */
  struct sockaddr_in server_addr;
  bzero(&server_addr, sizeof(server_addr));
  server_addr.sin_family = AF_INET;
  server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
  server_addr.sin_port = htons(SERVER_PORT);
  socklen_t server_addr_length = sizeof(server_addr);
 
  /* 创建socket */
  int client_socket_fd = socket(AF_INET, SOCK_DGRAM, 0);
  if(client_socket_fd < 0)
  {
    perror("Create Socket Failed:");
    exit(1);
  }
  
  /* 输入文件名到缓冲区 */
  char file_name[FILE_NAME_MAX_SIZE+1];
  bzero(file_name, FILE_NAME_MAX_SIZE+1);
  printf("请输入需要传输的文件名： ");
  scanf("%s", file_name);


    /* 数据传输 */
    while(1)
    {  
      
        /* 打开文件 */
        FILE *fp = fopen(file_name, "r");
        if(NULL == fp)
        {
            printf("File:%s Not Found.\n", file_name);
        }
        else
        {
            int len = 0;
            /* 每读取一段数据，便将其发给服务端 */
	    t_start=time(NULL);
            while(1)
            {
                PackInfo pack_info;
                if(receive_id == send_id)
                {
                    ++send_id;
                    if((len = fread(data.buf, sizeof(char), BUFFER_SIZE, fp)) > 0)
                    {
                        data.head.id = send_id; /* 发送id放进包头,用于标记顺序 */
                        data.head.buf_size = len; /* 记录数据长度 */
                        if(sendto(client_socket_fd, (char*)&data, sizeof(data), 0, (struct sockaddr*)&server_addr, server_addr_length) < 0)
                        {
                            perror("Send File Failed:");
                            break;
                        }
                        /* 接收确认消息 */
                        recvfrom(client_socket_fd, (char*)&pack_info, sizeof(pack_info), 0, (struct sockaddr*)&server_addr, 					&server_addr_length);
	                receive_id = pack_info.id; 
          	    }
	            else
        	    {
                        break;
	            }
                }
                else
  	        {
  	            /* 如果接收的id和发送的id不相同,重新发送 */
	            if(sendto(client_socket_fd, (char*)&data, sizeof(data), 0, (struct sockaddr*)&server_addr, server_addr_length) < 0)
        	    { 
	                perror("Send File Failed:");
            		break;
          	    }
          	    /* 接收确认消息 */
	            recvfrom(client_socket_fd, (char*)&pack_info, sizeof(pack_info), 0,(struct sockaddr*)&server_addr,&server_addr_length);
              	    receive_id = pack_info.id; 
                }
      	    }
	    t_end=time(NULL);
      	    /* 关闭文件 */
      	    fclose(fp);
      	    printf("File:%s Transfer Successful!\n", file_name);
	    printf("共用时%.0fs\t\n",difftime(t_end,t_start));
        }
    }
    close(client_socket_fd);
    return 0;

}






